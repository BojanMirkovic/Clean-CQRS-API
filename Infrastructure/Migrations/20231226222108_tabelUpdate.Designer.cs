// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RealDb))]
    [Migration("20231226222108_tabelUpdate")]
    partial class tabelUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.AnimalModel.Animal", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnimalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalId");

                    b.ToTable("Animals", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.UserAnimalModel.UsersHaveAnimals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UsersHaveAnimals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AnimalId = new Guid("12345678-1234-5678-1234-567812345682"),
                            UserId = new Guid("08260479-52a0-4c0e-a588-274101a2c3be")
                        },
                        new
                        {
                            Id = -2,
                            AnimalId = new Guid("12345680-1224-5878-1234-667812345690"),
                            UserId = new Guid("08260479-52a0-4c0e-a588-274101a2c3be")
                        },
                        new
                        {
                            Id = -3,
                            AnimalId = new Guid("12345678-1234-5678-1234-567812345682"),
                            UserId = new Guid("08260479-52a0-4c0e-a588-274101a2c3be")
                        },
                        new
                        {
                            Id = -4,
                            AnimalId = new Guid("12345678-1234-5678-1234-567812345682"),
                            UserId = new Guid("047425eb-15a5-4310-9d25-e281ab036868")
                        },
                        new
                        {
                            Id = -5,
                            AnimalId = new Guid("12345680-1224-5878-1234-667812345690"),
                            UserId = new Guid("047425eb-15a5-4310-9d25-e281ab036868")
                        });
                });

            modelBuilder.Entity("Domain.Models.UserModel.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("08260479-52a0-4c0e-a588-274101a2c3be"),
                            Password = "$2a$11$xxYuGtY3fJovEG/Izz1dJuE0mAClMoty/QWhocYI0iFVjVqqrYBBe",
                            Role = "admin",
                            Username = "Bojan"
                        },
                        new
                        {
                            UserId = new Guid("047425eb-15a5-4310-9d25-e281ab036868"),
                            Password = "$2a$11$EHmReaSAE1koOfh0tO/krOXm1Sx7nJ3Hs1YBCR5PBF2BxIN69UBa.",
                            Role = "user",
                            Username = "NotAnAdmin"
                        },
                        new
                        {
                            UserId = new Guid("047425eb-15a5-4310-9d25-e281ab036869"),
                            Password = "$2a$11$2WHuDaCJajagIx9fuu7Db.Er7OT0ZdP53RjoorVWfiv.R/XW23MZu",
                            Role = "user",
                            Username = "TestUser"
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalModel.Bird", b =>
                {
                    b.HasBaseType("Domain.Models.AnimalModel.Animal");

                    b.Property<bool>("CanFly")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Birds", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("3bddcce1-5b65-4b5d-8b81-4b2978e9dadc"),
                            AnimalType = "Bird",
                            Name = "Ara",
                            CanFly = false,
                            Color = "Red"
                        },
                        new
                        {
                            AnimalId = new Guid("debb6b0a-a1c1-410f-a75a-979bf09af4fc"),
                            AnimalType = "Bird",
                            Name = "Vrana",
                            CanFly = true,
                            Color = "Black"
                        },
                        new
                        {
                            AnimalId = new Guid("7f7994ed-0508-4474-9d84-99be962c2fa8"),
                            AnimalType = "Bird",
                            Name = "Sova",
                            CanFly = true,
                            Color = "Grey"
                        },
                        new
                        {
                            AnimalId = new Guid("12345678-1234-5678-1234-567812345682"),
                            AnimalType = "Bird",
                            Name = "TestBirdForUnitTestBird1",
                            CanFly = false,
                            Color = "blue"
                        },
                        new
                        {
                            AnimalId = new Guid("12345680-1224-5878-1234-667812345690"),
                            AnimalType = "Bird",
                            Name = "TestBirdForUnitTestBird2",
                            CanFly = false,
                            Color = "blue"
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalModel.Cat", b =>
                {
                    b.HasBaseType("Domain.Models.AnimalModel.Animal");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LikesToPlay")
                        .HasColumnType("bit");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Cats", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("a210c7b9-1d07-43e7-834c-27bc0a8b5ead"),
                            AnimalType = "Cat",
                            Name = "Kity",
                            Breed = "Persian Cat",
                            LikesToPlay = true,
                            Weight = 4
                        },
                        new
                        {
                            AnimalId = new Guid("c1c5d6d5-d209-49c4-8313-30c90bfef3dc"),
                            AnimalType = "Cat",
                            Name = "Micko",
                            Breed = "Domestic Cat",
                            LikesToPlay = true,
                            Weight = 6
                        },
                        new
                        {
                            AnimalId = new Guid("6498bca8-ebab-45d7-8936-5635afc05721"),
                            AnimalType = "Cat",
                            Name = "Azrael",
                            Breed = "Siamese Cat",
                            LikesToPlay = false,
                            Weight = 6
                        },
                        new
                        {
                            AnimalId = new Guid("12345678-1234-5678-1234-567812345680"),
                            AnimalType = "Cat",
                            Name = "TestCatForUnitTests",
                            Breed = "Domestic Cat",
                            LikesToPlay = false,
                            Weight = 6
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalModel.Dog", b =>
                {
                    b.HasBaseType("Domain.Models.AnimalModel.Animal");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Dogs", (string)null);

                    b.HasData(
                        new
                        {
                            AnimalId = new Guid("c047c84c-7827-43bc-b2ee-0fde2936d171"),
                            AnimalType = "Dog",
                            Name = "Astor",
                            Breed = "English Pointer",
                            Weight = 28
                        },
                        new
                        {
                            AnimalId = new Guid("6ad7ab00-2e9f-4c6c-a1dd-bfe7425ed329"),
                            AnimalType = "Dog",
                            Name = "Ari",
                            Breed = "English Pointer",
                            Weight = 31
                        },
                        new
                        {
                            AnimalId = new Guid("fb3bfb09-f7bf-4f7a-9495-75a25dba48e3"),
                            AnimalType = "Dog",
                            Name = "Max",
                            Breed = "German Shepherd",
                            Weight = 37
                        },
                        new
                        {
                            AnimalId = new Guid("12345678-1234-5678-1234-567812345678"),
                            AnimalType = "Dog",
                            Name = "TestDogForUnitTests",
                            Breed = "German Terrire",
                            Weight = 9
                        });
                });

            modelBuilder.Entity("Domain.Models.AnimalModel.Bird", b =>
                {
                    b.HasOne("Domain.Models.AnimalModel.Animal", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.AnimalModel.Bird", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalModel.Cat", b =>
                {
                    b.HasOne("Domain.Models.AnimalModel.Animal", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.AnimalModel.Cat", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AnimalModel.Dog", b =>
                {
                    b.HasOne("Domain.Models.AnimalModel.Animal", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.AnimalModel.Dog", "AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
